# Q1: Height-Weight Linear Regression
height <- c(151, 174, 138, 186, 128, 136, 179, 163, 152)
weight <- c(63, 81, 56, 91, 47, 57, 76, 72, 62)
data <- data.frame(height, weight)
model <- lm(weight ~ height, data = data)
summary(model)
new_height <- data.frame(height = 140)
predicted_weight <- predict(model, new_height)
print(paste("Predicted Weight for height 140 cm:", predicted_weight))
plot(data$height, data$weight, main = "Height vs Weight",
     xlab = "Height (cm)", ylab = "Weight (kg)", pch = 16, col = "blue")
abline(model, col = "red", lwd = 2)
boxplot(data)
qqnorm(model$residuals, main = "Q-Q Plot of Residuals")
qqline(model$residuals, col = "red")
plot(fitted(model), residuals(model), main = "Residuals vs Fitted",
     xlab = "Fitted Values", ylab = "Residuals", pch = 16, col = "purple")
abline(h = 0, col = "grey", lwd = 2)

# Q2: Home Size-Selling Price Linear Regression
home_size <- c(1400, 1300, 1200, 950, 900, 1000, 1300, 850, 1100)
selling_price <- c(70, 62, 65, 45, 40, 53, 68, 40, 55)
data <- data.frame(home_size, selling_price)
model <- lm(selling_price ~ home_size, data = data)
summary(model)
new_home <- data.frame(home_size = 1500)
predicted_price <- predict(model, new_home)
print(paste("Predicted Selling Price for 1500 sq ft home:", round(predicted_price, 2), "lakh Rs."))
plot(home_size, selling_price, pch = 16, col = "blue", main = "Home Size vs Selling Price",
     xlab = "Home Size (sq ft)", ylab = "Selling Price (lakh Rs.)")
abline(model, col = "red", lwd = 2)
boxplot(data, main = "Box Plot of Home Size and Selling Price", col = c("lightblue", "lightgreen"),
        ylab = "Values")
qqnorm(residuals(model), main = "Q-Q Plot of Residuals")
qqline(residuals(model), col = "red", lwd = 2)
plot(fitted(model), residuals(model), main = "Residuals vs Fitted",
     xlab = "Fitted Values", ylab = "Residuals", pch = 16, col = "purple")
abline(h = 0, col = "grey", lwd = 2)

# Q3: Years of Service-Income Linear Regression
years_of_service <- c(11, 7, 9, 5, 8, 6, 10)
income <- c(17, 15, 13, 12, 16, 14, 18)
data <- data.frame(years_of_service, income)
model <- lm(income ~ years_of_service, data = data)
summary(model)
plot(years_of_service, income, main = "Years of Service vs Income",
     xlab = "Years of Service", ylab = "Income (in thousands Rs)",
     pch = 16, col = "blue")
abline(model, col = "red")
predicted_income <- predict(model, newdata = data.frame(years_of_service = 10))
cat("Predicted Income for 10 years of service:", predicted_income, "thousands Rs")
plot(model$residuals, main = "Residual Plot",
     xlab = "Index", ylab = "Residuals", col = "red", pch = 16)
abline(h = 0, col = "blue")
qqnorm(model$residuals, main = "Q-Q Plot")
qqline(model$residuals, col = "red")
boxplot(income, main = "Box Plot of Income", ylab = "Income (in thousands Rs)", col = "lightblue", horizontal = TRUE)

# Q4: Iris Dataset Linear Regression
data(iris)
model <- lm(Sepal.Length ~ Sepal.Width, data = iris)
summary(model)
new_data <- data.frame(Sepal.Width = c(4.0))
predicted_sepal_length <- predict(model, new_data)
print(predicted_sepal_length)
plot(iris$Sepal.Width, iris$Sepal.Length, main = "Sepal Width vs Sepal Length",
     xlab = "Sepal Width", ylab = "Sepal Length", pch = 16, col = "blue")
abline(model, col = "red")
plot(model$fitted.values, model$residuals, main = "Residuals vs Fitted Model",
     xlab = "Fitted Values", ylab = "Residuals", pch = 16, col = "red")
abline(h = 0, col = "blue")
qqnorm(model$residuals, main = "Q-Q Plot")
qqline(model$residuals, col = "red")
boxplot(iris$Sepal.Length, iris$Sepal.Width,
        names = c("Sepal Length", "Sepal Width"),
        main = "Box Plot of Sepal Length and Sepal Width",
        ylab = "Values",
        col = c("lightblue", "lightgreen"))

# Q5: Mtcars Dataset Linear Regression
data(mtcars)
model_mtcars <- lm(mpg ~ hp, data = mtcars)
summary(model_mtcars)
new_data <- data.frame(hp = c(100, 150, 200))
predicted_mpg <- predict(model_mtcars, new_data)
print(predicted_mpg)
plot(mtcars$hp, mtcars$mpg, main = "Horsepower vs MPG",
     xlab = "Horsepower", ylab = "MPG", pch = 16, col = "blue")
abline(model_mtcars, col = "red")
plot(model_mtcars$fitted.values, model_mtcars$residuals, main = "Residuals vs Fitted Model",
     xlab = "Fitted Values", ylab = "Residuals", pch = 16, col = "red")
abline(h = 0, col = "blue")
qqnorm(model_mtcars$residuals, main = "QQ Plot of Residuals")
qqline(model_mtcars$residuals, col = "red")
boxplot(mtcars$mpg, mtcars$hp, names = c("MPG", "Horsepower"),
        main = "Box Plot of MPG and Horsepower",
        ylab = "Values", col = c("lightblue", "lightgreen"))

# Q6: Heart Disease, Biking and Smoking Regression
library(ggplot2)
heart_data <- read.csv(file.choose(), header = TRUE)
head(heart_data)
model <- lm(heart_disease ~ biking + smoking, data = heart_data)
summary(model)
new_data <- data.frame(biking = 50, smoking = 10)
predicted_heart_disease <- predict(model, newdata = new_data)
cat("Predicted Heart Disease: ", predicted_heart_disease, "\n")

# Biking vs Heart Disease
ggplot(heart_data, aes(x = biking, y = heart_disease)) +
  geom_point(aes(color = heart_disease), size = 3) +
  labs(title = "Scatter Plot: Biking vs Heart Disease", x = "Biking", y = "Heart Disease") +
  scale_color_gradient(low = "blue", high = "red") +
  theme_minimal()

# Smoking vs Heart Disease
ggplot(heart_data, aes(x = smoking, y = heart_disease)) +
  geom_point(aes(color = heart_disease), size = 3) +
  labs(title = "Scatter Plot: Smoking vs Heart Disease", x = "Smoking", y = "Heart Disease") +
  scale_color_gradient(low = "blue", high = "red") +
  theme_minimal()

# Boxplot for Heart Disease by Biking Level
boxplot(
  heart_data$heart_disease ~ cut(heart_data$biking, breaks = 4),
  main = "Box Plot: Heart Disease by Biking Levels",
  xlab = "Biking Levels",
  ylab = "Heart Disease",
  col = c("lightblue", "lightgreen", "lightpink", "lightyellow"),
  names = c("Low", "Medium", "High", "Very High")
)

# Boxplot for Heart Disease by Smoking Level
boxplot(
  heart_data$heart_disease ~ cut(heart_data$smoking, breaks = 4),
  main = "Box Plot: Heart Disease by Smoking Levels",
  xlab = "Smoking Levels",
  ylab = "Heart Disease",
  col = c("lightblue", "lightgreen", "lightpink", "lightyellow"),
  names = c("Low", "Medium", "High", "Very High")
)

qqnorm(model$residuals, main = "QQ Plot of Residuals")
qqline(model$residuals, col = "red")

ggplot(data.frame(Fitted = model$fitted.values, Residuals = model$residuals), aes(x = Fitted, y = Residuals)) +
  geom_point(color = "darkgreen") +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals") +
  theme_minimal()

# Q7: Performance Index Prediction
library(ggplot2)
index_data <- read.csv(file.choose(), header = TRUE)
model <- lm(index ~ written + language + tech + gk, data = index_data)
summary(model)
new_data <- data.frame(written = 48, language = 67, tech = 56, gk = 54)
predicted_index <- predict(model, newdata = new_data)
cat("Predicted Performance Index: ", predicted_index, "\n")
pairs(~index + written + language + tech + gk, data = index_data, main = "Pairwise Scatter Plot Matrix")

ggplot(index_data, aes(x = factor(1), y = written)) +
  geom_boxplot() +
  labs(title = "Box Plot: Written Skills", y = "Written Skills") +
  theme_minimal()

ggplot(index_data, aes(x = factor(1), y = language)) +
  geom_boxplot() +
  labs(title = "Box Plot: Language Skills", y = "Language Skills") +
  theme_minimal()

ggplot(index_data, aes(x = factor(1), y = tech)) +
  geom_boxplot() +
  labs(title = "Box Plot: Technical Knowledge", y = "Technical Knowledge") +
  theme_minimal()

ggplot(index_data, aes(x = factor(1), y = gk)) +
  geom_boxplot() +
  labs(title = "Box Plot: General Knowledge", y = "General Knowledge") +
  theme_minimal()

qqnorm(model$residuals, main = "QQ Plot of Residuals")
qqline(model$residuals, col = "red")

ggplot(data.frame(Fitted = model$fitted.values, Residuals = model$residuals), aes(x = Fitted, y = Residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals") +
  theme_minimal()
